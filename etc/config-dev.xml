<?xml version="1.0"?>
<yandex>
    <logger>
        <level>trace</level>
        <log>clickhouse-server.log</log>
        <errorlog>clickhouse-server.err.log</errorlog>
        <size>1000M</size>
        <count>10</count>
    </logger>

    <core_dump>
        <size_limit>0</size_limit>
    </core_dump>

    <user_files_path>/</user_files_path>

    <dns_cache_update_period>10000000</dns_cache_update_period>
    <http_port>8123</http_port>
    <tcp_port>9000</tcp_port>
    <mysql_port>9004</mysql_port>

    <!-- <https_port>8443</https_port> -->
    <tcp_ssl_port>9440</tcp_ssl_port>
    <!-- <remap_executable>1</remap_executable> -->
    <mlock_executable>1</mlock_executable>
    <!-- <max_server_memory_usage>10737418240</max_server_memory_usage> -->

    <!-- Used with https_port and tcp_ssl_port. Full ssl options list: https://github.com/yandex/ClickHouse/blob/master/contrib/libpoco/NetSSL_OpenSSL/include/Poco/Net/SSLManager.h#L71 -->
    <openSSL>
        <server> <!-- Used for https server AND secure tcp port -->
            <!-- openssl req -subj "/CN=localhost" -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout /etc/clickhouse-server/server.key -out /etc/clickhouse-server/server.crt -->
            <certificateFile>/data/ClickHouse/src/dbms/tests/integration/test_mysql_protocol/configs/server.crt</certificateFile>
            <privateKeyFile>/data/ClickHouse/src/dbms/tests/integration/test_mysql_protocol/configs/server.key</privateKeyFile>
            <!-- openssl dhparam -out /etc/clickhouse-server/dhparam.pem 4096 -->
            <dhParamsFile>/data/ClickHouse/src/dbms/tests/integration/test_mysql_protocol/configs/dhparam.pem</dhParamsFile>
            <verificationMode>none</verificationMode>
            <loadDefaultCAFile>true</loadDefaultCAFile>
            <cacheSessions>true</cacheSessions>
            <disableProtocols>sslv2,sslv3</disableProtocols>
            <preferServerCiphers>true</preferServerCiphers>
        </server>

        <client> <!-- Used for connecting to https dictionary source -->
            <loadDefaultCAFile>true</loadDefaultCAFile>
            <cacheSessions>true</cacheSessions>
            <disableProtocols>sslv2,sslv3</disableProtocols>
            <preferServerCiphers>true</preferServerCiphers>
            <!-- Use for self-signed: <verificationMode>none</verificationMode> -->
            <invalidCertificateHandler>
                <!-- Use for self-signed: <name>AcceptCertificateHandler</name> -->
                <name>RejectCertificateHandler</name>
            </invalidCertificateHandler>
        </client>
    </openSSL>

    <!-- Default root page on http[s] server. For example load UI from https://tabix.io/ when opening http://localhost:8123 -->
    <!--
        <http_server_default_response><![CDATA[<html ng-app="SMI2"><head><base href="http://ui.tabix.io/"></head><body><div ui-view="" class="content-ui"></div><script src="http://loader.tabix.io/master.js"></script></body></html>]]></http_server_default_response>
    -->

    <!-- Port for communication between replicas. Used for data exchange. -->
    <interserver_http_port>9009</interserver_http_port>
    <interserver_http_host>localhost</interserver_http_host>

    <!-- Hostname that is used by other replicas to request this server.
         If not specified, than it is determined analoguous to 'hostname -f' command.
         This setting could be used to switch replication to another network interface.
    -->
    <!--
        <interserver_http_host>example.yandex.ru</interserver_http_host>
    -->

    <!-- Listen specified host. use :: (wildcard IPv6 address), if you want to accept connections both with IPv4 and IPv6 from everywhere. -->
    <!-- <listen_host>::</listen_host> -->
    <listen_host>0.0.0.0</listen_host>

    <max_connections>4096</max_connections>
    <keep_alive_timeout>10</keep_alive_timeout>

    <!-- Maximum number of concurrent queries. -->
    <max_concurrent_queries>100</max_concurrent_queries>

    <!-- Set limit on number of open files (default: maximum). This setting makes sense on Mac OS X because getrlimit() fails to retrieve
         correct maximum value. -->
    <!-- <max_open_files>262144</max_open_files> -->

    <!-- Size of cache of uncompressed blocks of data, used in tables of MergeTree family.
         In bytes. Cache is single for server. Memory is allocated only on demand.
         Cache is used when 'use_uncompressed_cache' user setting turned on (off by default).
         Uncompressed cache is advantageous only for very short queries and in rare cases.
    -->
    <uncompressed_cache_size>8589934592</uncompressed_cache_size>

    <!-- Approximate size of mark cache, used in tables of MergeTree family.
         In bytes. Cache is single for server. Memory is allocated only on demand.
         You should not lower this value.
    -->
    <mark_cache_size>5368709120</mark_cache_size>


    <!-- Path to data directory, with trailing slash. -->
    <path>data</path>

    <!-- Path to temporary data for processing hard queries. -->
    <tmp_path>data/tmp/</tmp_path>

    <access_control_path>data/acl/</access_control_path>

    <custom_settings_prefixes>custom,amos</custom_settings_prefixes>

    <!-- Path to configuration file with users, access rights, profiles of settings, quotas. -->
    <users_config>users.xml</users_config>

    <!-- Default profile of settings.. -->
    <default_profile>default</default_profile>

    <!-- Default database. -->
    <default_database>default</default_database>

    <!-- Server time zone could be set here.

Time zone is used when converting between String and DateTime types,
when printing DateTime in text formats and parsing DateTime from text,
it is used in date and time related functions, if specific time zone was not passed as an argument.

Time zone is specified as identifier from IANA time zone database, like UTC or Africa/Abidjan.
If not specified, system time zone at server startup is used.

Please note, that server could display time zone alias instead of specified name.
Example: W-SU is an alias for Europe/Moscow and Zulu is an alias for UTC.
    -->
    <timezone>Europe/Moscow</timezone>

    <!-- You can specify umask here (see "man umask"). Server will apply it on startup.
         Number is always parsed as octal. Default umask is 027 (other users cannot read logs, data files, etc; group can only read).
    -->
    <!-- <umask>022</umask> -->

    <!-- Configuration of clusters that could be used in Distributed tables.
         https://clickhouse.yandex/reference_en.html#Distributed
    -->
    <remote_servers incl="clickhouse_remote_servers" >
        <!-- Test only shard config for testing distributed storage -->
        <local>
            <shard>
                <replica>
                    <host>localhost</host>
                    <port>9100</port>
                </replica>
            </shard>
        </local>
        <amos>
            <shard>
                <replica>
                    <host>localhost</host>
                    <port>9000</port>
                </replica>
            </shard>
            <shard>
                <replica>
                    <host>localhost</host>
                    <port>9000</port>
                </replica>
            </shard>
        </amos>
        <two>
            <shard>
                <replica>
                    <host>127.0.0.2</host>
                    <port>9000</port>
                </replica>
            </shard>
            <shard>
                <replica>
                    <host>127.0.0.3</host>
                    <port>9100</port>
                </replica>
            </shard>
        </two>
        <test_shard_localhost>
            <shard>
                <replica>
                    <host>localhost</host>
                    <port>9000</port>
                </replica>
            </shard>
        </test_shard_localhost>

        <test_cluster_one_shard_two_replicas>
           <shard>
               <replica>
                   <host>127.0.0.1</host>
                   <port>9000</port>
               </replica>
               <replica>
                   <host>127.0.0.2</host>
                   <port>9000</port>
               </replica>
           </shard>
        </test_cluster_one_shard_two_replicas>

        <test_cluster_two_shards_different_databases>
            <shard>
                <replica>
                    <default_database>shard_0</default_database>
                    <host>localhost</host>
                    <port>9000</port>
                </replica>
            </shard>
            <shard>
                <replica>
                    <default_database>shard_1</default_database>
                    <host>localhost</host>
                    <port>9000</port>
                </replica>
            </shard>
        </test_cluster_two_shards_different_databases>
        <test_unavailable_shard>
            <shard>
                <replica>
                    <host>localhost</host>
                    <port>9000</port>
                </replica>
            </shard>
            <shard>
                <replica>
                    <host>localhost</host>
                    <port>1</port>
                </replica>
            </shard>
        </test_unavailable_shard>
        <test_shard_localhost>
            <shard>
                <replica>
                    <host>localhost</host>
                    <port>9000</port>
                </replica>
            </shard>
        </test_shard_localhost>
        <test_cluster_two_shards>
            <shard>
                <internal_replication>true</internal_replication>
                <replica>
                    <host>127.0.0.1</host>
                    <port>9000</port>
                </replica>
            </shard>
            <shard>
                <internal_replication>true</internal_replication>
                <replica>
                    <host>127.0.0.2</host>
                    <port>9000</port>
                </replica>
            </shard>
        </test_cluster_two_shards>
        <test_cluster_two_shards_localhost>
            <shard>
                <replica>
                    <host>localhost</host>
                    <port>9000</port>
                </replica>
            </shard>
            <shard>
                <replica>
                    <host>localhost</host>
                    <port>9000</port>
                </replica>
            </shard>
        </test_cluster_two_shards_localhost>
        <test_shard_localhost_secure>
            <shard>
                <replica>
                    <host>localhost</host>
                    <port>9440</port>
                    <secure>1</secure>
                </replica>
            </shard>
        </test_shard_localhost_secure>
    </remote_servers>


    <!-- If element has 'incl' attribute, then for it's value will be used corresponding substitution from another file.
         By default, path to file with substitutions is /etc/metrika.xml. It could be changed in config in 'include_from' element.
         Values for substitutions are specified in /yandex/name_of_substitution elements in that file.
    -->

    <!-- ZooKeeper is used to store metadata about replicas, when using Replicated tables.
         Optional. If you don't use replicated tables, you could omit that.

See https://clickhouse.yandex/reference_en.html#Data%20replication
    -->
    <zookeeper>
        <node>
            <host>localhost</host>
            <port>32181</port>
        </node>
        <implementation>testkeeper</implementation>
    </zookeeper>

    <auxiliary_zookeepers>
        <amos>
            <node index="1">
                <host>bjlt-rs248.sy</host>
                <port>2181</port>
            </node>
        </amos>
    </auxiliary_zookeepers>

    <!-- Substitutions for parameters of replicated tables.
         Optional. If you don't use replicated tables, you could omit that.

See https://clickhouse.yandex/reference_en.html#Creating%20replicated%20tables
    -->
    <macros>
        <shard>0</shard>
        <test>Hello, world!</test>
    </macros>


    <!-- Reloading interval for embedded dictionaries, in seconds. Default: 3600. -->
    <builtin_dictionaries_reload_interval>3600</builtin_dictionaries_reload_interval>


    <!-- Maximum session timeout, in seconds. Default: 3600. -->
    <max_session_timeout>3600</max_session_timeout>

    <!-- Default session timeout, in seconds. Default: 60. -->
    <default_session_timeout>60</default_session_timeout>

    <shutdown_wait_unfinished>0</shutdown_wait_unfinished>

    <!-- Sending data to Graphite for monitoring. Several sections can be defined. -->
    <!--
        interval - send every X second
        root_path - prefix for keys
        metrics - send data from table system.metrics
        events - send data from table system.events
        asynchronous_metrics - send data from table system.asynchronous_metrics
    -->
    <!--
        <graphite>
        <host>localhost</host>
        <port>42000</port>
        <timeout>0.1</timeout>
        <interval>60</interval>
        <root_path>one_min</root_path>

<metrics>true</metrics>
<events>true</events>
<asynchronous_metrics>true</asynchronous_metrics>
</graphite>
<graphite>
<host>localhost</host>
<port>42000</port>
<timeout>0.1</timeout>
<interval>1</interval>
<root_path>one_sec</root_path>

<metrics>true</metrics>
<events>true</events>
<asynchronous_metrics>false</asynchronous_metrics>
</graphite>
    -->


    <!-- Query log. Used only for queries with setting log_queries = 1. -->
    <query_log>
        <!-- What table to insert data. If table is not exist, it will be created.
             When query log structure is changed after system update,
             then old table will be renamed and new table will be created automatically.
        -->
        <database>system</database>
        <table>query_log</table>

        <!-- Interval of flushing data. -->
        <flush_interval_milliseconds>60000</flush_interval_milliseconds>
    </query_log>
    <!-- <query_thread_log> -->
    <!--     <database>system</database> -->
    <!--     <table>query_thread_log</table> -->
    <!--     <engine>ENGINE MergeTree PARTITION BY toYYYYMM(event_date) ORDER BY (event_date, event_time) TTL event_date + INTERVAL 6 MONTH DELETE SETTINGS min_bytes_for_wide_part = '10M'</engine> -->
    <!--     <flush_interval_milliseconds>7500</flush_interval_milliseconds> -->
    <!-- </query_thread_log> -->
    <!-- <trace_log> -->
    <!--     <database>system</database> -->
    <!--     <table>trace_log</table> -->
    <!--     <engine>ENGINE MergeTree PARTITION BY toYYYYMM(event_date) ORDER BY (event_date, event_time) TTL event_date + INTERVAL 6 MONTH DELETE SETTINGS min_bytes_for_wide_part = '10M'</engine> -->
    <!--     <flush_interval_milliseconds>7500</flush_interval_milliseconds> -->
    <!-- </trace_log> -->
    <!-- <part_log> -->
    <!--     <database>system</database> -->
    <!--     <table>part_log</table> -->
    <!--     <engine>ENGINE MergeTree PARTITION BY toYYYYMM(event_date) ORDER BY (event_date, event_time) TTL event_date + INTERVAL 6 MONTH DELETE SETTINGS min_bytes_for_wide_part = '10M'</engine> -->
    <!--     <flush_interval_milliseconds>7500</flush_interval_milliseconds> -->
    <!-- </part_log> -->
    <!-- <metric_log> -->
    <!--     <database>system</database> -->
    <!--     <table>metric_log</table> -->
    <!--     <engine>ENGINE MergeTree PARTITION BY toYYYYMM(event_date) ORDER BY (event_date, event_time) TTL event_date + INTERVAL 6 MONTH DELETE SETTINGS min_bytes_for_wide_part = '10M'</engine> -->
    <!--     <flush_interval_milliseconds>7500</flush_interval_milliseconds> -->
    <!--     <collect_interval_milliseconds>1000</collect_interval_milliseconds> -->
    <!-- </metric_log> -->
    <!-- <asynchronous_metric_log> -->
    <!--     <database>system</database> -->
    <!--     <table>asynchronous_metric_log</table> -->
    <!--     <engine>ENGINE MergeTree PARTITION BY toYYYYMM(event_date) ORDER BY (event_date, event_time) TTL event_date + INTERVAL 6 MONTH DELETE SETTINGS min_bytes_for_wide_part = '10M'</engine> -->
    <!--     <flush_interval_milliseconds>60000</flush_interval_milliseconds> -->
    <!-- </asynchronous_metric_log> -->


    <!-- Uncomment if use part_log
         <part_log>
         <database>system</database>
         <table>part_log</table>

<flush_interval_milliseconds>7500</flush_interval_milliseconds>
</part_log>
    -->


    <!-- Parameters for embedded dictionaries, used in Yandex.Metrica.
         See https://clickhouse.yandex/reference_en.html#Internal%20dictionaries
    -->

    <!-- Path to file with region hierarchy. -->
    <!-- <path_to_regions_hierarchy_file>/opt/geo/regions_hierarchy.txt</path_to_regions_hierarchy_file> -->

    <!-- Path to directory with files containing names of regions -->
    <!-- <path_to_regions_names_files>/opt/geo/</path_to_regions_names_files> -->


    <!-- Configuration of external dictionaries. See:
         https://clickhouse.yandex/reference_en.html#External%20Dictionaries
    -->

    <!-- Uncomment if you want data to be compressed 30-100% better.
         Don't do that if you just started using ClickHouse.
    -->
    <compression incl="clickhouse_compression">
        <!--
            <!- - Set of variants. Checked in order. Last matching case wins. If nothing matches, lz4 will be used. - ->
            <case>

<!- - Conditions. All must be satisfied. Some conditions may be omitted. - ->
<min_part_size>10000000000</min_part_size>        <!- - Min part size in bytes. - ->
<min_part_size_ratio>0.01</min_part_size_ratio>    <!- - Min size of part relative to whole table size. - ->

<!- - What compression method to use. - ->
<method>zstd</method>    <!- - Keep in mind that zstd compression library is highly experimental. - ->
</case>
        -->
    </compression>

    <resharding>
        <task_queue_path>/clickhouse/task_queue</task_queue_path>
    </resharding>

    <!-- Allow to execute distributed DDL queries (CREATE, DROP, ALTER, RENAME) on cluster.
         Works only if ZooKeeper is enabled. Comment it if such functionality isn't required. -->
    <distributed_ddl>
        <!-- Path in ZooKeeper to queue with DDL queries -->
        <path>/clickhouse/task_queue/ddl</path>
    </distributed_ddl>

    <http_handlers>
        <rule>
            <url>/qp</url>
            <methods>GET</methods>
            <handler>
                <type>predefined_query_handler</type>
                <query>SELECT arrayStringConcat(arrayReverse(arrayMap(x -> demangle(addressToSymbol(x)), trace)), ';') || ' ' || toString(count()) FROM system.trace_log WHERE trace_type = 'CPU' and query_id = {id:String} and event_date != today() - 10000 GROUP BY trace format TSVRaw</query>
            </handler>
        </rule>
        <defaults/>
    </http_handlers>

    <!-- wide parts enabled -->
    <merge_tree>
        <min_bytes_for_wide_part>0</min_bytes_for_wide_part>
    </merge_tree>

    <!-- <query_log> -->
    <!--     <database>system</database> -->
    <!--     <table>query_log</table> -->
    <!--     <engine>ENGINE MergeTree PARTITION BY toYYYYMM(event_date) ORDER BY (event_date, event_time) TTL event_date + INTERVAL 6 MONTH DELETE SETTINGS min_bytes_for_wide_part = '10M'</engine> -->
    <!--     <flush_interval_milliseconds>7500</flush_interval_milliseconds> -->
    <!-- </query_log> -->
    <!-- <query_thread_log> -->
    <!--     <database>system</database> -->
    <!--     <table>query_thread_log</table> -->
    <!--     <engine>ENGINE MergeTree PARTITION BY toYYYYMM(event_date) ORDER BY (event_date, event_time) TTL event_date + INTERVAL 6 MONTH DELETE SETTINGS min_bytes_for_wide_part = '10M'</engine> -->
    <!--     <flush_interval_milliseconds>7500</flush_interval_milliseconds> -->
    <!-- </query_thread_log> -->
    <trace_log>
        <database>system</database>
        <table>trace_log</table>
        <engine>ENGINE MergeTree PARTITION BY toYYYYMM(event_date) ORDER BY (event_date, event_time) TTL event_date + INTERVAL 6 MONTH DELETE SETTINGS min_bytes_for_wide_part = '10M'</engine>
        <flush_interval_milliseconds>7500</flush_interval_milliseconds>
    </trace_log>
    <!-- <part_log> -->
    <!--     <database>system</database> -->
    <!--     <table>part_log</table> -->
    <!--     <engine>ENGINE MergeTree PARTITION BY toYYYYMM(event_date) ORDER BY (event_date, event_time) TTL event_date + INTERVAL 6 MONTH DELETE SETTINGS min_bytes_for_wide_part = '10M'</engine> -->
    <!--     <flush_interval_milliseconds>7500</flush_interval_milliseconds> -->
    <!-- </part_log> -->
    <!-- <metric_log> -->
    <!--     <database>system</database> -->
    <!--     <table>metric_log</table> -->
    <!--     <engine>ENGINE MergeTree PARTITION BY toYYYYMM(event_date) ORDER BY (event_date, event_time) TTL event_date + INTERVAL 6 MONTH DELETE SETTINGS min_bytes_for_wide_part = '10M'</engine> -->
    <!--     <flush_interval_milliseconds>7500</flush_interval_milliseconds> -->
    <!--     <collect_interval_milliseconds>1000</collect_interval_milliseconds> -->
    <!-- </metric_log> -->
    <!-- <asynchronous_metric_log> -->
    <!--     <database>system</database> -->
    <!--     <table>asynchronous_metric_log</table> -->
    <!--     <engine>ENGINE MergeTree PARTITION BY toYYYYMM(event_date) ORDER BY (event_date, event_time) TTL event_date + INTERVAL 6 MONTH DELETE SETTINGS min_bytes_for_wide_part = '10M'</engine> -->
    <!--     <flush_interval_milliseconds>60000</flush_interval_milliseconds> -->
    <!-- </asynchronous_metric_log> -->

    <local_disk_check_period_ms>1000</local_disk_check_period_ms>
    <storage_configuration>
        <disks>
            <default>
                <keep_free_space_bytes>1024</keep_free_space_bytes>
            </default>
            <jbod1>
                <path>jbod1/</path>
            </jbod1>
            <jbod2>
                <path>jbod2/</path>
            </jbod2>
            <jbod3>
                <path>jbod3/</path>
            </jbod3>
        </disks>
        <policies>
            <jbod>
                <volumes>
                    <jbod_volume>
                        <disk>jbod1</disk>
                        <disk>jbod2</disk>
                        <disk>jbod3</disk>
                    </jbod_volume>
                </volumes>
            </jbod>
        </policies>
    </storage_configuration>

</yandex>
